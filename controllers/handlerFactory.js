const AppError = require("../utils/appError");
const APIFeatures = require("../utils/apiFeatures");


//TODO These are all "factory" functions for CRUD operations for every resource.
//todo These don't work on only one resource but all resources
//todo As basic implementation for CRUD operations is same in all resources , we can create this
//todo These func. take name of "Model" as argument and perform CRUD on that model
//todo In controller files we can just call these function with Model name as an argument

//? there are some things which are different in different resources like "populating" etc.
//? for those we can take another arg. or use a middleware or something else as we did in getOne and getAll func.



exports.deleteOne = Model => async (req, res,next) => {
    try {
      const doc = await Model.findByIdAndDelete(req.params.id);

      if(!doc){
        return next(new AppError("No document found with that id",404));   //  this "next()" takes it straight to global handler
      }

      res.status(204).json({
        status: "success",
        data:null
      });
    } catch (err) {
      next(err);
    }
  };
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

exports.updateOne = Model => async (req, res,next) => {
try {

    const doc = await Model.findByIdAndUpdate(req.params.id,req.body,{
    new:true,                             // "new:true" return back the updated object rather than the original object
    runValidators:true})                  // this run the validator like schema data types and validations, so that we can't update like price
                                            // to a string

    if(!doc){
    return next(new AppError("No document found with that id",404));   //  this "next()" takes it straight to global handler
    }

    res.status(200).json({
    status: "success",
    data:{
        data:doc
    }
    });
    
} catch (err) {
    next(err);
}
};
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????



exports.createOne = Model=> async (req, res,next) => {
    try {
      const doc = await Model.create(req.body);                 

    res.status(200).json({
      status: "success",
      data:{
        data:doc
      }
    });
    } catch (err) {
      // res.status(400).json({
      //   status:"fail",
      //   message:err
      // });
      next(err);                // we can use this bcz we hv the global error handler in errorController.js file,and
    }                                        // calling "next" with any arg. means it is an error and jumps directly to
                             // the global error handler    if ther is no global handler, do it as in commented lines above next(err)
  };
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????



exports.getAll = Model =>async (req,res,next)=>{
    try {

    let filter = {};                                         //*this is for "reviews"
    // console.log(req.params);
    if(req.params.userId) filter = {user:req.params.userId};    //* it checks if a "userID" is given in URL  
    //*                                                        reviews/bookings of only that user will be searched
    if(req.params.tourId) filter = {tour:req.params.tourId};    //* it checks if a "tourID" is given in URL  
    //*                                                        reviews/bookings of only that tour will be searched

    const features = new APIFeatures(Model.find(filter),req.query)
                            .filter()
                            .sort()                        //*These features are now available for all resources
                            .limitFields()
                            .paginate();
    const docs = await features.query;   
    // const docs = await features.query.explain();   //*"explain()" gives detail about the query
                                              
    res.status(200).json({
      status: "success",
      results:docs.length,
      data:{
        data:docs
      }
    })
      } catch (err) {
        next(err);
      }                                            
        
    }
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

  exports.getOne = (Model,populateOption) => async (req,res,next)=>{
    try {
      let query = Model.findById(req.params.id);                  //*This is bcz we need to "populate" reviews in "tour"
      if(populateOption) query = query.populate(populateOption);  //* so we take another arg. in which we can pass
      const doc = await query;                             //*populate options.(see getTourById func. in tour controller)

      if(!doc){
        return next(new AppError("No document found with this id",404));
      }
      res.status(200).json({
        status:"success",
        data :{
          data:doc
        }
      });
      
    } catch (err) {
      next(err);
    }
  }
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

