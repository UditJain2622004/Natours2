const multer = require("multer");
const sharp = require("sharp");
const User = require("../models/userModel");
const AppError = require("../utils/appError");
const factory = require("./handlerFactory");


  //Multer     for image uploads =========================================================================

       // to set storage address and file name of the image
// const multerStorage = multer.diskStorage({
//   destination: (req,file,callback)=>{
//     callback(null,"public/img/users");                 //"callback" is like "next"  ,"null" means no error
//     //                                                  ,we can also pass error like in multerFilter object
//   },

//   filename: (req,file,callback)=>{                          
//     // file name is set as   "user-(userID)-(time).(extension)"

//     const ext = file.mimetype.split("/")[1];      // to get the extension
//     callback(null, `user-${req.user.id}-${Date.now()}.${ext}`)   
//   }
// });

// we save the file first to multer memory bcz we need to resize it
const multerStorage = multer.memoryStorage();


       // to allow only image files to be uploaded
const multerFilter = (req,file,callback)=>{
  if(file.mimetype.startsWith("image")){            //this has access to the "file" upoaded in the "file" argument
    callback(null,true);                   // so we check if the "mimetype" field of "file" object starts with "image"
  }else{                                              // to see whole "file" object , console.log(file)
    callback(new AppError("Not an image! Please upload an image",400),false);
  }
}

const upload = multer({                  //pass the two object created above in multer function
  storage : multerStorage,
  fileFilter : multerFilter
});

exports.uploadUserPhoto = upload.single("photo");      

exports.resizeUserPhoto = async(req,res,next)=>{
  try {
    if(!req.file) return next();                           //if no photo uploaded, go to next middleware
  
    req.file.filename = `user-${req.user.id}-${Date.now()}.jpeg`;          // set filename into "req.file.filename"
  
    await sharp(req.file.buffer)                       // "req.file.buffer" contains the file we saved into memory
      .resize(500,500)                          // resize to 500*500 pxl
      .toFormat("jpeg")                         // convert to "jpeg" format
      .jpeg({quality:90})                       // reduce quality to 90%
      .toFile(`public/img/users/${req.file.filename}`);         // save image to disk
  
    next();
    
  } catch (err) {
    next(err);
  }

}

  //todo ==== Everything else =========================================================================

const filterObj = (obj, ...allowedFields)=>{
  const newObj = {};
  Object.keys(obj).forEach(el=>{
    if(allowedFields.includes(el)) newObj[el] = obj[el];
  });
  return newObj;
}
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

  //todo ==== Middleware =========================================================================

exports.getMe = async(req,res,next)=>{          //* This is for "/me" route   it puts ID of currently logged in user
  req.params.id = req.user.id;                  //* in "req.params.id"   , and then we can use "getOne" factory handler
  next();  
}
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


  //todo ==== Route functions =========================================================================


exports.getAllUsers = factory.getAll(User);
exports.updateUser = factory.updateOne(User);
exports.deleteUser = factory.deleteOne(User);
exports.getUserById = factory.getOne(User);




  exports.updateMe = async (req,res,next)=>{        // To update name and email only
    try{
      //console.log(req.file);         // any image uploaded is contained in "req.file"
     
      // 1) Create error if user POSTs password data
      if(req.body.password || req.body.passwordConf){
        return next(new AppError("This route is not for updating password. Please use /updatePassword",400));
  
      }
      // Filter out fields other than name and email bcz only name and email are allowed to be updated
      const filteredBody = filterObj(req.body, "name","email");      // this is a  func. defined above
      if(req.file) filteredBody.photo = req.file.filename;          // if a photo is uploaded , add it to "photo" field 
      //                                                            of "filteredBody" obj. which is used in updating

      // 2) Update user data
      const updatedUser = await User.findByIdAndUpdate(req.user.id, filteredBody, {
        new:true,                       // returns the updated user
        runValidators:true})            // run validators again

      res.status(200).json({
        status:"success",
        data:{
          user:updatedUser
        }
      });
    

    }catch(err){
      next(err);
    }
  }
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

  exports.deleteMe = async (req,res,next)=>{               // we don't actually delete the doc.  we just set the "active"
    await User.findByIdAndUpdate(req.user.id, {active:false});    // field to "false"
//                                                          so the users are not actually deleted but they don't show up 
    res.status(204).json({                                 // in users bcz of a query middleware that we applied that 
      status:"success",                                  // find only those users whose active field is set as "false"
      data:null
    })
  }
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

  
  exports.createUser = (req,res)=>{
    res.status(500).json({
      status:"Error",
      message : "This route is not yet defined!!. Use /signup instead."
    })
  }
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


  
  

  


  //todo ==== Get All users without factory function =========================================================================

  // exports.getAllUsers = async (req,res,next)=>{
//   try {
//       const users = await User.find();   
//       res.status(200).json({
//         status: "success",
//         results:users.length,
//         data:{
//           users:users
//         }
//       })
//     } catch (err) {
//       next(err);
//     }                                            
      
//   }
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


  //todo ==== Delete user without factory function =========================================================================

// exports.deleteUser = async (req,res,next)=>{
  //   try {
  //     const user = await User.findByIdAndDelete(req.params.id);
  
  //     if(!user){
  //       return next(new AppError("No user found with this ID",404));
  //     }
  //     res.status(204).json({
  //       status:"success",
  //       data :null
  //     });

  //   } catch (err) {
  //       next(err);
  //   }
  // }
//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????


   //todo ==== Get One user by id without factory function =========================================================================

 // exports.getUserById = async (req,res,next)=>{
  //   try {
  //     const user = await User.findById(req.params.id);
  //     if(!user){
  //       return next(new AppError("No user found with this id",404));
  //     }
  //     res.status(200).json({
  //       status:"success",
  //       data :{
  //         user:user
  //       }
  //     });
      
  //   } catch (err) {
  //     next(err);
  //   }
  // }

//??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
